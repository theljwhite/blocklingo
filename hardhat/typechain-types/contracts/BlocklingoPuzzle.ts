/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface BlocklingoPuzzleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VERSION"
      | "depositEscrow"
      | "escrowBalance"
      | "manager"
      | "version"
      | "winPuzzle"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "ERC20Deposit"): EventFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositEscrow",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "escrowBalance",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "manager", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "winPuzzle",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositEscrow",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "escrowBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "manager", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "winPuzzle", data: BytesLike): Result;
}

export namespace ERC20DepositEvent {
  export type InputTuple = [
    sender: AddressLike,
    amount: BigNumberish,
    depositedAt: BigNumberish
  ];
  export type OutputTuple = [
    sender: string,
    amount: bigint,
    depositedAt: bigint
  ];
  export interface OutputObject {
    sender: string;
    amount: bigint;
    depositedAt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface BlocklingoPuzzle extends BaseContract {
  connect(runner?: ContractRunner | null): BlocklingoPuzzle;
  waitForDeployment(): Promise<this>;

  interface: BlocklingoPuzzleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VERSION: TypedContractMethod<[], [string], "view">;

  depositEscrow: TypedContractMethod<
    [_amount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  escrowBalance: TypedContractMethod<[], [bigint], "view">;

  manager: TypedContractMethod<[], [string], "view">;

  version: TypedContractMethod<[], [string], "view">;

  winPuzzle: TypedContractMethod<
    [_rewardAmount: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "depositEscrow"
  ): TypedContractMethod<[_amount: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "escrowBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "manager"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "winPuzzle"
  ): TypedContractMethod<[_rewardAmount: BigNumberish], [bigint], "nonpayable">;

  getEvent(
    key: "ERC20Deposit"
  ): TypedContractEvent<
    ERC20DepositEvent.InputTuple,
    ERC20DepositEvent.OutputTuple,
    ERC20DepositEvent.OutputObject
  >;

  filters: {
    "ERC20Deposit(address,uint256,uint256)": TypedContractEvent<
      ERC20DepositEvent.InputTuple,
      ERC20DepositEvent.OutputTuple,
      ERC20DepositEvent.OutputObject
    >;
    ERC20Deposit: TypedContractEvent<
      ERC20DepositEvent.InputTuple,
      ERC20DepositEvent.OutputTuple,
      ERC20DepositEvent.OutputObject
    >;
  };
}
